#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
version: '3'
services:
  zookeeper:
    container_name: zookeeper_dev
    image: zookeeper:3.5.5
    restart: always
    hostname: zookeeper
    ports:
      - 2181:2181
    volumes:
      - "/etc/localtime:/etc/localtime"
      - "/Users/yxk/docker/zookeeper/data:/data"  ${symbol_pound} TODO :前面的地址改成自己的
      - "/Users/yxk/docker/zookeeper/log:/var/log/zookeeper"  ${symbol_pound} TODO :前面的地址改成自己的
  kafka:
    container_name: kafka_dev
    image: wurstmeister/kafka:2.12-2.2.1
    hostname: kafka
    ${symbol_pound} 配置参数见：https://hub.docker.com/r/wurstmeister/kafka
    restart: always
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
${symbol_pound}      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092                                      ${symbol_pound} 端口
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.203.8.28:9092  ${symbol_pound}( TODO 修改成自己的宿主机ip)配置宿主机ip或容器和宿主机都能识别的ip ，这个配置是kafka发布到zk上的，供外部使用，默认使用容器的id，容器id和容器的ip会在hosts里做映射
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092            ${symbol_pound} 全网监听，定义kafka的服务监听
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "zipkin:1:1,zipkin.log.info:1:1,zipkin.log.warn:1:1,zipkin.log.error:1:1"
      KAFKA_MESSAGE_MAX_BYTES: 6000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 6000000
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 60000
      KAFKA_NUM_PARTITIONS: 2
    volumes:
      - "/etc/localtime:/etc/localtime"
${symbol_pound}      - "/Users/yxk/docker/kafka/docker.sock:/var/run/docker.sock"  ${symbol_pound} TODO :前面的地址改成自己的
${symbol_pound}      - "/Users/yxk/docker/kafka/data:/kafka"   ${symbol_pound} kafka数据  ${symbol_pound} TODO :前面的地址改成自己的
${symbol_pound}      - "/Users/yxk/docker/kafka/logs:/tmp/kafka-logs"  ${symbol_pound} TODO :前面的地址改成自己的
    depends_on:
      - zookeeper
  kafka-manager:
    container_name: kafka_manager_dev
    image: sheepkiller/kafka-manager
    restart: always
    links:
      - zookeeper
      - kafka
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: "${author}"
      KAFKA_MANAGER_AUTH_ENABLED: "true"  ${symbol_pound} 开启kafka-manager权限校验
      KAFKA_MANAGER_USERNAME: 5ycode       ${symbol_pound} 登陆账户
      KAFKA_MANAGER_PASSWORD: ${author}      ${symbol_pound} 登陆密码
      KM_ARGS: -Djava.net.preferIPv4Stack=true
    ports:
      - 9000:9000
    depends_on:
      - zookeeper
    volumes:
      - "/etc/localtime:/etc/localtime"
  redis:
    container_name: redis_dev
    image: redis
    restart: always
    command: redis-server /etc/redis/redis.conf --requirepass 123456 --appendonly yes
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:
      - "/etc/localtime:/etc/localtime"
      - "/Users/yxk/docker/redis/data:/data"  ${symbol_pound} TODO :前面的地址改成自己的
      - "/Users/yxk/docker/redis/redis.conf:/etc/redis/redis.conf"  ${symbol_pound} TODO :前面的地址改成自己的，并把conf目录里的redis.conf拷贝进去
    ports:
      - 6379:6379
  mysql:
    container_name: mysql_dev
    image: "mysql:5.7"
${symbol_pound}    hostname: ${author}
    ${symbol_pound} https://hub.docker.com/_/mysql?tab=description
    environment:
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      MYSQL_ROOT_PASSWORD: "123456" ${symbol_pound} root密码
${symbol_pound}      MYSQL_USER: '${author}'  ${symbol_pound} 新增超级用户（直接访问MYSQL_DATABASE）
${symbol_pound}      MYSQL_PASS: '123456'  ${symbol_pound} 新增超级用户的密码
      MYSQL_DATABASE: ${appName}  ${symbol_pound} 初始化的数据库名称,只能填写一个，多张库表的创建可以放到sql文件中
    restart: always
    ports:
      - 3306:3306
    volumes:
      - "/etc/localtime:/etc/localtime"
      - "/Users/yxk/docker/mysql/my.cnf:/etc/mysql/my.cnf"  ${symbol_pound} TODO :前面的地址改成自己的，并把conf目录中的my.cnf拷贝进去
      - "/Users/yxk/docker/mysql/data:/var/lib/mysql"  ${symbol_pound} TODO :前面的地址改成自己的
      - "/Users/yxk/docker/mysql/log/error.log:/var/log/mysql/error.log"  ${symbol_pound} TODO :前面的地址改成自己的
      - "/Users/yxk/docker/mysql/init:/docker-entrypoint-initdb.d/"  ${symbol_pound} TODO :前面的地址改成自己的 ，并把init目录里的脚本拷贝进去
${symbol_pound}  nacos:
${symbol_pound}    container_name: nacos_dev
${symbol_pound}    image: "nacos/nacos-server:v2.0.3"
${symbol_pound}    ${symbol_pound}    env_file:
${symbol_pound}    ${symbol_pound}      - ../nacos/nacos-standlone-mysql.env
${symbol_pound}    environment:
${symbol_pound}      - "/etc/localtime:/etc/localtime"
${symbol_pound}      - PREFER_HOST_MODE=hostname                 ${symbol_pound} 如果支持主机名可以使用hostname,否则使用ip，默认也是ip
${symbol_pound}      - MODE=standalone                           ${symbol_pound} 单机模式启动
${symbol_pound}${symbol_pound}      - SPRING_DATASOURCE_PLATFORM=mysql          ${symbol_pound} 数据源平台 仅支持mysql或不保存empty
${symbol_pound}      ${symbol_pound} TODO 修改mysql连接信息
${symbol_pound}      - MYSQL_SERVICE_HOST=127.0.0.1    ${symbol_pound} 注：这里不能为`127.0.0.1`或`localhost`方式！！！
${symbol_pound}      - MYSQL_SERVICE_DB_NAME=nacos
${symbol_pound}      - MYSQL_SERVICE_PORT=3306
${symbol_pound}      - MYSQL_SERVICE_USER=root
${symbol_pound}      - MYSQL_SERVICE_PASSWORD=123456
${symbol_pound}      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false
${symbol_pound}      ${symbol_pound} TODO 修改JVM调优参数
${symbol_pound}      - JVM_XMS=128m   ${symbol_pound}-Xms default :2g
${symbol_pound}      - JVM_XMX=128m   ${symbol_pound}-Xmx default :2g
${symbol_pound}      - JVM_XMN=64m    ${symbol_pound}-Xmn default :1g
${symbol_pound}      - JVM_MS=32m     ${symbol_pound}-XX:MetaspaceSize default :128m
${symbol_pound}      - JVM_MMS=32m    ${symbol_pound}-XX:MaxMetaspaceSize default :320m
${symbol_pound}      - NACOS_DEBUG=n  ${symbol_pound}是否开启远程debug，y/n，默认n
${symbol_pound}      - TOMCAT_ACCESSLOG_ENABLED=false ${symbol_pound}是否开始tomcat访问日志的记录，默认false
${symbol_pound}    restart: always
${symbol_pound}    ports:
${symbol_pound}      - "8848:8848"
${symbol_pound}      - "9848:9848"
${symbol_pound}      - "9555:9555"
${symbol_pound}    volumes:
${symbol_pound}      - "./logs:/home/nacos/logs/"
${symbol_pound}      - "./custom.properties:/home/nacos/init.d/custom.properties"
${symbol_pound}      - "./nacos/application.properties:/home/nacos/conf/application.properties"
${symbol_pound}    depends_on:
${symbol_pound}      - mysql
  eureka-server:
    image: 5ycode/eureka:0.1
    container_name: eureka-server_dev
    restart: always
    environment:
      - "/etc/localtime:/etc/localtime"
      - JVM_XMS=312m
      - JVM_XMX=312m
      - REMOTE_DEBUG=y
    ports:
      - "8765:8765"
    volumes:
      - ./logs/eureka-server:/logs